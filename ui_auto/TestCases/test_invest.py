# -*- coding: UTF-8 -*-
# @Time: 2020-05-05 15:22
# @Author: wyd
# @File: test_invest.py

# 前提条件：
# 独立的测试账号
# ######################尽量不要依赖测试环境数据，如果没有，就自己造环境######################
# 1、用户已登录
# 2、有能够投资的标    如果没有标，就先加标，可以用接口的方式
# 3、用户有余额可以投资
    # 1、充1个亿
    # 2、接口方式：查询当前用户还有多少钱。>6000不用充值，如果小于用例中投资的金额，那就充值。

# 步骤
# 1、在首页选标：不要根据标名，而是根据抢投标来默认选第一个标。
# 2、获取一下投资前的用户余额
# 3、标页面：输入投资金额，点击投资按钮。
# 4、标页面：点击投资成功的弹出框 - 查看并激活，进入个人页面

# 断言
# 投资后的金额：是不是少了投资的量
# 个人页面：获取投资后的金额
# 投资前的金额 - 投资后的金额 = 投资金额
# 投资纪录对不对

# 异常用例：非常好创造 环境。
# 1、全投操作？ 标的可投余额 > 个人余额；投资金额 > 标的可投金额(暂时不考虑自动化实现)

import unittest

class TestInvest(unittest.TestCase):

    def __init__(self, driver):
        self.driver = driver

    def setUp(self):
        pass
    def tearDown(self):
        pass

    def test_invest_success(self):
        # 1、在首页选标：不要根据标名，而是根据抢投标来默认选第一个标。
        # 2、获取一下投资前的用户余额
        # 3、标页面：输入投资金额，点击投资按钮。
        # 4、标页面：点击投资成功的弹出框 - 查看并激活，进入个人页面

        # 断言
        # 投资后的金额：是不是少了投资的量
        # 个人页面：获取投资后的金额
        # 投资前的金额 - 投资后的金额 = 投资金额
        # 投资纪录对不对
        pass

    def test_invest_failed_no100(self):
        pass

    def test_invest_failed_no10(self):
        pass