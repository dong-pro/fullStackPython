一, 上节课内容回顾
    1. 函数名的应用.
        函数名就是变量.
        可以互相赋值.
        可以作为容器的元素
        可以作为返回值进行返回
        可以作为参数传递给函数
    2. 闭包
        在内部函数使用外部函数的变量.
        def outer():
            a = 10 # 很耗时
            def inner():
                print(a)
            return inner
        outer()()
        outer()()
        ret = outer()
        ret()
        ret()

        闭包好处:
            1. 保护变量
            2. 可以让一个变量常驻内存
    3. 迭代器
        __iter__() 可迭代对象. 获取迭代器
        __next__() + __iter__() 迭代器

        特点:
            1. 惰性机制
            2. 只能向前
            3. 节省内存
        for循环的内部就是迭代器
        lst = [1,2,4]
        it = lst.__iter__()  # 获取迭代器
        while 1:
            try:
                it.__next__() # 从迭代器中获取数据
            except StopIteration:
                break
        Iterable: 可迭代的
        Iterator: 迭代器

二, 作业讲解
三, 今日主要内容
    1. 生成器
        生成器的本质就是迭代器
        生成器的特点和迭代器一样.取值方式和迭代器一样(__next__(), send(): 给上一个yield传值).
        生成器一般由生成器函数或者生成器表达式来创建
        其实就是手写的迭代器

    2. 生成器函数
        和普通函数没有区别. 里面有yield的函数就是生成器函数.
        生成器函数在执行的时候. 默认不会执行函数体. 返回生成器
        通过生成器的__next__()分段执行这个函数.
        send() 给上一个yield传值, 不能在开头(没有上一个yield), 最后一个yield也不可以用send()

    3. 推导式
        1. 列表推导式 [结果 for循环 条件筛选]
        2. 字典推导式 {k:v for循环 条件筛选}
        3. 集合推导式 {k for循环 条件}

    4. 生成器表达式
        (结果 for循环 条件)
        特点:
            1. 惰性机制
            2. 只能向前
            3. 节省内存(鸡蛋)

    预习: 内置函数(68个, sorted(), filter(), map()不要看)