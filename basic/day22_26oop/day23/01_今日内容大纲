一, 上节课内容回顾
    1. 面向对象帮你解决什么问题?
        封装:
            归类,将函数放置到一个类中.
            打包,将数据打包放到一个对象.
    2. 三大特性
        封装
        继承
        多态：Python原生支持多态,崇尚鸭子模型.由于Python函数传参时,无序指定类型:
                def func(arg): # arg可以是多种类型,只要其中有send方法即可.
                arg.send()
    3. 编写面向对象程序
        归类+提取公共值

    4. self到底是谁?
        self参数是Python帮助我们自动传递.
        如果执行面向对象中的方法时,前面必须有一个对象: xxx.func()

        class Foo:
            def f1(self):
                pass

            def f2(self):
                self.f1()

        obj = Foo()
        obj.f2()

    5. Python支持多继承


二, 作业讲解无
三, 今日主要内容
    1. 成员
        1. 类的成员
            class Foo:
                # 方法
                def __init__(self,name):
                    # 实例变量/字段
                    self.name = name

                # 方法
                def func(self):
                    pass

            # obj,Foo类的对象/实例
            obj = Foo('朱奎峰')

        成员共分为三类:
            变量:   字段.py  字段成员修饰符.py
                - 实例变量(字段)
                    - 公有实例变量(字段)
                    - 私有实例变量(字段)
                - 类变量(静态字段)
                    - 公有类变量(静态字段)
                    - 私有类变量(静态字段)

                思考题: 如何验证儿子都不知道私有字段的存在.

            方法: 方法.py  方法成员修饰符.py
                - 实例方法
                - 静态方法
                - 类方法
                面试题: 静态方法/类方法和实例方法的区别?
                    定义时
                    调用时
                    应用场景

            属性(通过方法改造出来):  属性.py
                总结:
                    1. 编写时
                        - 方法上方写 @property
                        - 方法参数:只有一个self
                    2. 调用时:无需加括号  对象.方法
                    3. 应用场景: 对于简单的方法,当无需传参且有返回值时,可以使用 @property
            练习题9、10

    2. 嵌套(建模)   嵌套.py
            准则: 字段和方法的归类.

			以前:
				[
					{"name":'alex1','age':18,xxx:999},
					{"name":'alex2',age':18},
				]